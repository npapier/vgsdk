<?xml version="1.0"?>

<!--	VGSDK - Copyright (C) 2008, 2009, Nicolas Papier.
	Distributed under the terms of the GNU Library General Public License (LGPL)
	as published by the Free Software Foundation.
	Author Nicolas Papier -->

<nodes>

	<node	name = "Camera"
			inherits="GeometricalTransformation ProjectionTransformation">
		<doxygen>
			<docBrief>Camera node used to set the projection matrix, viewport and scissor box. Camera position and orientation could be specified too.</docBrief>
			<doc>Sets up the projection with an user defined matrix for the viewing frustum (into the world coordinate system). </doc>
			<doc>Sets up the camera position and orientation with 4x4 matrix from lookAt field.</doc>
			<doc>Note that some matrices (such as singular ones) may result in errors in bounding boxes, picking, and lighting. </doc>
			<ingroup>g_nodes</ingroup>
			<ingroup>g_singleAttributeNodes</ingroup>
			<ingroup>g_transformationNodes</ingroup>
		</doxygen>
		<!-- projection and lookAt renames into intrinsics and extrinsics -->
		<sf name="projection" doc="Determines the projection matrix.">
			<type name="MatrixR" namespace="vgm" default="vgm::MatrixR::getIdentity()"></type>
		</sf>
		<sf name="lookAt"
			doc="Determines the 3D geometric transformation as a 4x4 matrix applied to camera.\nNote that this transformation is applied to engine like any GeometricalTransformation node with composeTransformation field sets to false.\nBy default, the camera is situated at the origin, points down the negative z-axis, and has an up-vector of (0, 1, 0).">
			<type name="MatrixR" namespace="vgm" default="vgm::MatrixR::getIdentity()"></type>
		</sf>
		<of name="viewport" doc="Determines the viewport.">
			<type name="Rectangle2i" namespace="vgm" default="0, 0, 1600, 1200"/>
		</of>
		<of name="scissor" doc="Determines the scissor box. It is automatically enabled if this field is defined, otherwise it is disabled. The default value is empty, i.e. scissor test is disabled.">
			<type name="Rectangle2i" namespace="vgm" default=""/>
		</of>
		<includehpp>vgd/include/vgd/node/Camera.hpp</includehpp>
		<includecpp>vgd/src/node/Camera.cpp</includecpp>
	</node>


	<node name = "ClipPlane" inherits = "MultiAttribute" >
		<doxygen>
			<docBrief>Clipping plane node</docBrief>
			<doc>All subsequent shapes in the scene graph will be clipped to the half-space defined by the \c plane field.</doc>
			<doc>The half-space is the side of the plane in the direction of the plane normal.</doc>
			<doc>Any number of clipping planes may be active simultaneously, although the graphics library may place a limit on this number during rendering (i.e. 6 for OpenGL).</doc>
			<ingroup>g_nodes</ingroup>
			<ingroup>g_multiAttributeNodes</ingroup>
			<ingroup>g_transformationNodes</ingroup>
		</doxygen>
		<sf name="plane" doc="Specifies the clipping plane.">
			<type name="Plane" namespace="vgm" default="vgm::Vec3f(1.f, 0.f, 0.f), 0.f "></type>
		</sf>
		<of name="on" doc="Specifies if the clipping plane is enabled or disabled.">
			<type name="bool" default="true"/>
		</of>
	</node>


	<node name = "CullFace" inherits="SingleAttribute" >
		<doxygen>
			<docBrief>Cull face facets definition node</docBrief>
			<doc>The CullFace node specifies whether front-facing and/or back-facing facets can be culled.</doc>
			<doc>Facets include triangles, quadrilaterals, polygons and rectangles.</doc>
			<doc>FrontFace node specifies which of the clockwise and counterclockwise facets are front-facing and back-facing.</doc>
			<doc>See vgd::node::FrontFace.</doc>
			<ingroup>g_nodes</ingroup>
			<ingroup>g_singleAttributeNodes</ingroup>
			<ingroup>g_propertiesNodes</ingroup>
		</doxygen>
		<sf name="mode" doc="Specifies whether front-facing and/or back-facing facets can be culled.">
			<type name="enum">
				<enum default="DISABLED">
					<value name="DISABLED" doc="Facet culling is disabled"/>
					<value name="BACK" doc="Back-facing facets are culled"/>
					<value name="FRONT" doc="Front-facing facets are culled"/>
					<value name="FRONT_AND_BACK" doc="Front-facing and back-facing facets are culled"/>
				</enum>
			</type>
		</sf>
	</node>


	<node name = "DirectionalLight" inherits = "Light" >
		<doxygen>
			<docBrief>Node representing a directional light source.</docBrief>
			<doc>This node defines a directional light source that illuminates along rays parallel to a given 3-dimensional vector.</doc>
			<ingroup>g_nodes</ingroup>
			<ingroup>g_multiAttributeNodes</ingroup>
			<ingroup>g_coloringAndLightingNodes</ingroup>
		</doxygen>

		<of name="direction" doc="Direction of the light.">
			<type name = "Vec3f" namespace="vgm" default="0.f, 0.f, -1.f"></type>
		</of>
	</node>


	<node name = "FrontFace" inherits = "SingleAttribute" >
		<doxygen>
			<docBrief>Front face polygons definition node</docBrief>
			<doc>The FrontFace node specifies if polygons are in clockwise winding in window coordinates, or counterclockwise winding in window coordinates, are taken to be front-facing.</doc>
			<ingroup>g_nodes</ingroup>
			<ingroup>g_singleAttributeNodes</ingroup>
			<ingroup>g_propertiesNodes</ingroup>
		</doxygen>
		<sf name="orientation" doc="Specifies if front facing polygons are clockwise (CW) or conterclockwise (CCW)">
			<type name="enum">
				<enum default="CCW">
					<value name="CCW" doc="(C)ounter-(C)lock(W)ise ordering"/>
					<value name="CW" doc="(C)lock(W)ise ordering"/>
				</enum>
			</type>
		</sf>
	</node>


	<node name = "Light" inherits = "MultiAttribute" >
		<doxygen>
			<docBrief>Abstract base class for all light source nodes</docBrief>
			<doc>Light is the abstract base class for all light nodes. A light node defines an illumination</doc>
			<doc>source that may affect subsequent shapes in the scene graph, depending on the current lighting</doc>
			<doc>style. Light sources are affected by the current transformation. A light node under a separator</doc>
			<doc>does not affect any objects outside that separator.</doc>
			<doc>@remarks The maximum number of lights is equal at least to 8 in OpenGL and DirectX. Feel free to use up to 8 lights. @todo Removes this limits</doc>
			<doc>@todo Support for attenuation</doc>
			<doc>@todo High-level method for changing intensity of color.</doc>
			<ingroup>g_abstractNodes</ingroup>
		</doxygen>
		<of name="on" doc="Determines whether the source is active or inactive. When inactive, the source does not illuminate at all. Set to true to switch on the light, false to switch off the light.">
			<type name="bool" default="false"></type>
		</of>
		<of name="ambient" doc="Ambient intensity of the light.">
			<type name="Vec4f" namespace="vgm" default="0.f, 0.f, 0.f, 0.f"></type>
		</of>
		<of name="diffuse" doc="Diffuse intensity of the light.">
			<type name="Vec4f" namespace="vgm" default="1.f, 1.f, 1.f, 0.f"></type>
		</of>
		<of name="specular" doc="Specular intensity of the light.">
			<type name="Vec4f" namespace="vgm" default="1.f, 1.f, 1.f, 0.f"></type>
		</of>

		<of name="castShadow" doc="Indicating that this light casts a shadow.">
			<type name="bool" default="false"></type>
		</of>

		<includehpp>vgd/include/vgd/node/Light.hpp</includehpp>
		<includecpp>vgd/src/node/Light.cpp</includecpp>
	</node>


	<node name = "LightModel" inherits = "SingleAttribute" >
		<doxygen>
			<docBrief>Lighting model node</docBrief>
			<doc>This node specifies current lighting mode (off/standard per vertex lighting/standard per pixel lighting) and some options of the lighting model.</doc>
			<ingroup>g_nodes</ingroup>
			<ingroup>g_singleAttributeNodes</ingroup>
			<ingroup>g_coloringAndLightingNodes</ingroup>
		</doxygen>

		<of name="model" doc="Sets the lighting model to LIGHTING_OFF, STANDARD_PER_VERTEX or STANDARD_PER_PIXEL.">
			<type name="enum">
				<enum default="STANDARD_PER_VERTEX">
					<value name="LIGHTING_OFF"			doc="No lighting"/>
					<value name="STANDARD_PER_VERTEX"	doc="Lighting is computed per vertex"/>
					<value name="STANDARD_PER_PIXEL"	doc="Lighting is computed per pixel"/>
				</enum>
			</type>
		</of>

		<of name="ambient" doc="Sets the ambient RGBA intensity of the entire scene.">
			<type name="Vec4f" namespace="vgm" default="0.2f, 0.2f, 0.2f, 0.0f"></type>
		</of>

		<of name="viewer" doc="Specifies how specular reflection angles are computed. Possible values :
- AT_INFINITY specular reflections are computed from the origin of the eye coordinate system.
- AT_EYE specular reflection angles take the view direction to be parallel to and in the direction of the -z axis, regardless of the location of the vertex in eye coordinates.">
			<type name="enum">
				<enum default="AT_INFINITY">
					<value name="AT_INFINITY"	doc="Specular reflections are computed from the origin of the eye coordinate system"/>
					<value name="AT_EYE"		doc="Specular reflection angles take the view direction to be parallel to and in the direction of the -z axis, regardless of the location of the vertex in eye coordinates"/>
				</enum>
			</type>
		</of>

		<of name="twoSided" doc="Specifies whether one- or two-sided lighting calculations are done for polygons and triangles.">
			<type name="bool" default="false"></type>
		</of>

		<of name="shadow" doc="Specifies the algorithm used to compute shadow.">
			<type name="enum">
				<enum default="NONE">
					<value name="NONE"				doc="Shadows are not computed"/>
					<value name="SHADOW_MAPPING"	doc="Shadows are computed using shadow mapping algorithm"/>
				</enum>
			</type>
		</of>
	</node>


	<node name = "Material" inherits = "SingleAttribute" >
		<doxygen>
			<docBrief>Surface material definition node</docBrief>
			<doc>The Material node specifies current surface material properties for all subsequent shapes nodes</doc>
			<doc> and is used by the lighting equations during rendering.</doc>
			<doc>The field \c transparency is not optional because it is used by others fields (in OpenGL ambient and others use 4 floats).</doc>
			<ingroup>g_nodes</ingroup>
			<ingroup>g_singleAttributeNodes</ingroup>
			<ingroup>g_coloringAndLightingNodes</ingroup>
		</doxygen>

		<sf name="opacity" doc="Sets opacity from 1.0 for being completely opaque until 0.0 for being completely transparent.">
			<type name="float" default="1.f"></type>
		</sf>

		<of name="ambient" doc="Ambient color of the surface.">
			<type name="Vec3f" namespace="vgm" default="0.2f, 0.2f, 0.2f"/>
		</of>

		<of name="diffuse" doc="Diffuse color of the surface.">
			<type name="Vec3f" namespace="vgm" default="0.8f, 0.8f, 0.8f"/>
		</of>

		<of name="specular" doc="Specular color of the surface.">
			<type name="Vec3f" namespace="vgm" default="0.f, 0.f, 0.f"/>
		</of>

		<of name="emission" doc="Emmissive color of the surface.">
			<type name="Vec3f" namespace="vgm" default="0.f, 0.f, 0.f"/>
		</of>

		<of name="shininess" doc="Shininess coefficient of the surface. Values can range from 0.0 for no shininess (a diffuse surface) to 1.0 for maximum shininess (a highly polished surface).">
			<type name="float" default="0.f"></type>
		</of>

<!--		<of name="face" doc="Specifies which face(s) are being updated.">
			<type name="enum">
				<enum default="FRONT_AND_BACK">
					<value name="BACK" doc="Back-facing facets are updated"/>
					<value name="FRONT" doc="Front-facing facets are updated"/>
					<value name="FRONT_AND_BACK" doc="Front-facing and back-facing facets are updated"/>
				</enum>
			</type>
		</of>-->

		<includehpp>vgd/include/vgd/node/Material.hpp</includehpp>
		<includecpp>vgd/src/node/Material.cpp</includecpp>
<!--	<codehpp></codehpp> <codecpp></codecpp> -->
	</node>


	<node name = "PointLight" inherits = "Light" >
		<doxygen>
			<docBrief>Node representing a point light source.</docBrief>
			<doc>A point source illuminates equally in all directions. It is omni-directional.</doc>
			<doc>All shape nodes that come after this light in the scene graph are illuminated by this light.</doc>
			<doc>The light's location is affected by the current geometrical transformation.</doc>
			<ingroup>g_nodes</ingroup>
			<ingroup>g_multiAttributeNodes</ingroup>
			<ingroup>g_coloringAndLightingNodes</ingroup>
		</doxygen>

		<of name = "position" doc = "Location of the light source.">
			<type name = "Vec3f" namespace = "vgm" default = "0.f, 0.f, 1.f"></type>
		</of>
	</node>


	<node name = "SpotLight" inherits = "PointLight" >
		<doxygen>
			<docBrief>Node representing a spotlight source.</docBrief>
			<doc>This node defines a spotlight style light source.</doc>
			<doc>A spotlight is placed at a fixed \c position in 3-space and illuminates in a cone along a particular \c direction.</doc>
			<doc>The illumination is within a cone whose angle is given by the \c cutOffAngle field.</doc>
			<doc>The intensity of the illumination drops off exponentially as a ray of light diverges from this direction toward the edges of the cone.</doc>
			<doc>The rate of drop-off and the angle of the cone are controlled by the \c dropOffRate and \c cutOffAngle fields.</doc>
			<doc>All shape nodes that come after this light in the scene graph are illuminated by this light.</doc>
			<doc>The light's location is affected by the current geometrical transformation.</doc>
			<ingroup>g_nodes</ingroup>
			<ingroup>g_multiAttributeNodes</ingroup>
			<ingroup>g_coloringAndLightingNodes</ingroup>
		</doxygen>

		<of name = "direction" doc = "The direction (center axis of cone) of the light in homogeneous object coordinates.">
			<type name = "Vec3f" namespace = "vgm" default = "0.f, 0.f, -1.f"></type>
		</of>

		<of name = "cutOffAngle" doc = "The angle (in degree) outside of which intensity is zero, measured from the center axis of the cone to an edge. This value must be inside [0, 90] or be equal to 180 (like PointLight node).">
			<type name = "float" default = "90.f"></type>
		</of>

		<of name = "dropOffRate" doc = "Rate of intensity drop-off per change in angle from primary direction. 0 means constant intensity, 1 means very sharp drop-off.">
			<type name = "float" default = "0.f"></type>
		</of>
	</node>


<!--	<node	name = "MaterialExt"
			inherits="Material">
		<doxygen>
			<docBrief>Extended surface material definition node</docBrief>
			<doc>The Material node specifies current surface material properties for all subsequent shapes nodes</doc>
			<doc> and is used by the lighting equations during rendering.</doc>
			<doc>The field \c transparency is not optional because it is used by others fields (in OpenGL ambient and others use 4 floats).</doc>
			<ingroup>g_nodes</ingroup>
			<ingroup>g_singleAttributeNodes</ingroup>
			<ingroup>g_coloringAndLightingNodes</ingroup>
		</doxygen>
	</node>-->

<!-- todo
	<node	name="SingleAttribute">
	</node> -->
</nodes>

<!-- test default value code generator
			<type name="float"></type>
			<type name="float" default="1.f"></type>
			<type name="Plane" namespace="vgm"></type>
			<type name="Plane" namespace="vgm" default=" "></type>
			<type name="Plane" namespace="vgm" default=" 0, 1, 2"></type>-->
